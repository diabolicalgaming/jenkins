// pipeline must be top-level

pipeline {
    /*
        Build can run on any available Jenkins agent.

        * agent - is where to execute, e.g. Node, executor or Node etc.

        * stages - where the "work" happens, you can define each stage and steps.
          There can be as many stages as you want.
    */
    agent any

    /*
        I can provide parameters to my pipeline.

        Parameterize your Build:

            - string(name, defaultValue, description)
        
        I can use these parameters in any of my stages

        Now on Jenkins, to build the pipeline select the 'Build with parameters' option.
    */
    parameters {
        string(name: 'VERSION', defaultValue: '', description: 'verstion to dpeloy on prod')
        choice(name: 'VERSION', choices: ['1.1.1', '1.1.2', '1.1.3'], description: 'verstion to dpeloy on prod')
        booleanParam(name: 'executeTests', defaultValue: true, description: '')
    }

    /*
        tools - provides you with vuild tools for your project, i.e. Maven, Gradle etc
    
        The tools that Jenkins support:

            * gradle
            * maven
            * jdk
    */
    tools {
        // to find installation name go to 'Manage Jenkins' -> 'Global Tool Configuration'
        maven 'Maven'
    }

    // You can also create your own environment variables
    environment {
        NEW_VERSION = "1.1.1"
        // creditials('') - binds credentials provided by Jenkins to your environment variable
        // it will fetch the credential by id from Jenkins. Go to 'Manage Jenkins' -> 'Credentials' to find credential id
        SERVER_CREDENTIALS = credentials('admin')
    }

    stages {
        stage("build") {
                when {
                    // I can define conditions/expressions for each stage, i.e. only run tests on develop branch
                    expression {
                        // only build if code changes have been made
                        CODE_CHANGES == true
                    }
            }
            // you can also use external groovy scripts using the script block
            script {
                gv = load "script.groovy"
                gv.buildApp()
            }
            steps {
                echo "building version ${NEW_VERSION}"
            }
        }

        stage("test") {
            when {
                // I can define conditions/expressions for each stage, i.e. only run tests on develop branch
                expression {
                    // environment variable BRANCH_NAME is provided by Jenkins
                    // execute if branch is 'main'
                    BRANCH_NAME == 'main' // can also use or (||) as well as and (&&)
                }
                // use parameters
                expression {
                    params.executeTests == true
                }
            }
            steps {
                echo "testing the application"
            }
        }

        stage("deploy") {
            steps {
                echo "deploying version ${params.VERSION}"

                // if you want to use credentials in only one stage, use a wrapper
                /*
                    Required plugins:

                        o Credentials
                        o Credentials Binding
                */
                withCredentials([
                    // pass credential id from Jenkins
                    usernamePassword(credentials: 'admin', usernameVariable: USER, passwordVariable: PWD)
                ]) {
                    sh "some script ${USER} ${PWD}"
                }
            }
        }
    }

    /*
        post - executes some logic AFTER all stages have been executed.

        Here you can define different types of conditions.
    */
    post {
        always {
            /* 
                always - execute this logic/script all the time regardless of failed/successful build 
                e.g. sending email to team about the build condition.
            */
        }
        success {
            /*
                success - logic is only executed if the build succeded.
            */
        }
        failure {
            /*
                failure - logic is only executed if the build failed.
            */
        }
    }
}